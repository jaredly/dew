#!/bin/bash
# OH look what this became!
# I like brew, don't you? Lets write dew drops and have fun!

COLOR_RESET="\033[0;0m"

function echo_red {
  local red="\033[0;31m"
  echo -e $red"$1"$COLOR_RESET
}

function echo_green {
  local green="\033[0;32m"
  echo -e $green"$1"$COLOR_RESET
}

function echo_blue {
  local red="\033[0;34m"
  echo -e $red"$1"$COLOR_RESET
}

function echo_yellow {
  local yellow="\033[1;33m"
  echo -e $yellow"$1"$COLOR_RESET
}

function debug() {
  if [[ ! -z $DEBUG && ! -z $1 ]]; then
    echo_blue "debug:$COLOR_RESET $@"
  fi
  [[ ! -z $DEBUG ]]
}

function throw() {
  echo_red "fatal:$COLOR_RESET $@" 1>&2
  exit 1
}

function WantTo() {
  read -p "$@ (y/N)? " choice
  case "$choice" in 
    y|Y ) return 0;;
    n|N|* ) return 1;;
  esac
}

ROOT=$(dirname $(readlink -f $0))/..
debug "ROOT=$ROOT"

DROPS=$ROOT/drops
debug "DROPS=$DROPS"

DATA=$HOME/.dew-data
debug "DATA=$DATA"
mkdir -p $DATA

SCOPES=$DATA/scopes
debug "SCOPES=$SCOPES"
mkdir -p $SCOPES


##
# First thing you must call
function SetContainerScope() {
  NAME=$1
  debug "NAME=$NAME"
  SCOPE=$SCOPES/$NAME
  debug "SCOPE=$SCOPE"
}

##
# Something on the index
function SetContainerImage() {
  IMAGE=$1
  debug "IMAGE=$IMAGE"
}

function TailContainerLogs() {
  sudo docker logs -f $1
}

##
# FIXME
# this is cool, but may be better to just grep the cli since we assume it is available
# otherwise do EVERYTHING via remote api :)
function ContainerRunning() {
  test $(echo -e "GET /containers/$1/json HTTP/1.0\r\n" | sudo nc -U /var/run/docker.sock | grep HTTP | awk '{ print $2 }') -eq 200
}

##
# If you don't use this we can't properly uninstall
function AnnounceVolume() {
  local vol=$SCOPE/volumes
  local name=$1
  local host_path=$2
  local container_path=$3
  mkdir -p $vol
  ln -sf $2 $vol/$1
  debug "volumes: `ls -lah $vol`"
}

##
# Set it with a heredoc
# TODO support setting one at a time too
function SetContainerEnv() {
  ENV_FILE=$SCOPE/env
  echo "" > $ENV_FILE
  while read line
  do
    array=( ${array[@]} $line )
    echo ${array[@]} >> $ENV_FILE
  done
  debug && cat $ENV_FILE
}

# sudo rm -rf /opt/gitlab/ ; docker rm -f gitlab ;  sudo rm -rf /opt/postgresql/data ; docker rm -f postgresql
function DestroyContainer() {
  if [[ ! -d $SCOPE ]]; then
    throw "$NAME not found"
  fi
  if WantTo "Really destroy container '$NAME'"
  then
    for item in $(ls $SCOPE); do
      debug "item=$item"
      if [[ "$item" = "volumes" ]]; then
        for vol in `ls $SCOPE/$item`; do
          local vol_symlink=$SCOPE/volumes/$vol
          local vol_realpath=$(readlink $vol_symlink)
          if WantTo "Delete volume '$vol' ($vol_symlink=>$vol_realpath)"; then
            rm -rf $vol_symlink $vol_realpath
          fi
          echo_green "OK"
        done
      fi
    done
    rm -rf $SCOPE
    echo_green "OK"
  fi
}

function list() {
  ls $DROPS
}

function SelectDrop() {
  local init=$DROPS/$1/init
  local alt_init=$DROPS/$1
  if [[ -f $init ]]; then
    DROP=$init
  elif [[ -f $alt_init ]]; then
    DROP=$alt_init
  else
    throw "No such formula $name"
  fi
  debug "DROP=$DROP"
  SetContainerScope $1
}

function install() {
  SelectDrop $2
  mkdir -p $SCOPE
  source $DROP
}

function destroy() {
  SelectDrop $2
  DestroyContainer
}

case "$1" in
  list | install | destroy )
    $1 $@
    ;;
  * )
    echo "Example usage: " >&2
    echo "  $(basename $0) list" >&2
    echo "  $(basename $0) install <name>" >&2
    echo "  $(basename $0) destroy <name>" >&2
    exit 1
esac

